generte migration and models
npx sequelize model:generate --name User --attributes username:string,email:string,hashedPassword:string

npx dotenv sequelize db:migrate
  genereete seeds

  npx sequelize seed:generate --name demo-user

 seed data

 npx dotenv sequelize db:seed:all
 to check in psql
 psql <database name> -c 'SELECT * FROM "Users"'

login

fetch('/api/session', {
  method: 'POST',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `<value of XSRF-TOKEN cookie>`
  },
  body: JSON.stringify({ credential: 'demo@demo.com', password: 'password' })
}).then(res => res.json()).then(data => console.log(data));

 add new one

 fetch('/api/users', {
  method: 'POST',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `aiYS3yYF-G9DB7KVtxt7patyB1wnpYuLpU-w`
  },
  body: JSON.stringify({
    email: 'sp@spider.man',
    username: 'Spy',
    password: 'password'
  })
}).then(res => res.json()).then(data => console.log(data));


fetch('/api/users', {
  method: 'POST',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `341OmZA6-dnAxYotycAkSjB0lq6wTAhKzOs8`
  },
  body: JSON.stringify({
    email: 'firestar@spider.man',
    username: 'Firestar',
    password: ''
  })
}).then(res => res.json()).then(data => console.log(data));


create table for post

npx sequelize model:generate --name Post --attributes userId:integer,title:string,imgUrl:string,context:string,availability:integer
npx dotenv sequelize db:migrate

generet post data
 npx sequelize seed:generate --name posts-data


test for create

fetch('/api/posts/new', {
  method: 'POST',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `341OmZA6-dnAxYotycAkSjB0lq6wTAhKzOs8`
  },
  body: JSON.stringify({
    userId:1,
     title:"test from browser",
     imgUrl:"no)))",
      context:" this is context",
      availability: 2
  })
}).then(res => res.json()).then(data => console.log(data));


test for delete

fetch('/api/posts/7', {
  method: 'DELETE',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `341OmZA6-dnAxYotycAkSjB0lq6wTAhKzOs8`
  },
}).then(res => res.json()).then(data => console.log(data));

 test for update

 fetch('/api/posts/14', {
  method: 'PATCH',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `JE0DghDB-Il-4fLrtSsdIXegHF8CSSZH2lNs`
  },
  body: JSON.stringify({
    userId:1,
     title:"update succsess",
     imgUrl:"https://www.picsnslides.com/wp-content/gallery/sky/P1090762.jpg",
      context:" update!!!!",
      availability: 4
  })
}).then(res => res.json()).then(data => console.log(data));



npx sequelize model:generate --name Registration --attributes userId:integer,postId:integer,name:string,email:string,phone:string


npx sequelize seed:generate --name registration-data


npx dotenv sequelize db:drop

npx dotenv sequelize db:create

npx dotenv sequelize db:migrate

npx dotenv sequelize db:seed:all


create regester


fetch('/api/posts/new', {
  method: 'POST',
  headers: {
    "Content-Type": "application/json",
    "XSRF-TOKEN": `341OmZA6-dnAxYotycAkSjB0lq6wTAhKzOs8`
  },
  body: JSON.stringify({
    userId:2,
    postId: 2
    name:"Blue",
    email:"blue@blue.com",
    phone: "765-098-7654"
  })
}).then(res => res.json()).then(data => console.log(data));


heroku restart && heroku pg:reset DATABASE --confirm givein1
&& heroku run npm run sequelize db:migrate && heroku run npm run sequelize db:seed:all


heroku restart && heroku pg:reset DATABASE --confirm givein1 && heroku run npm run sequelize db:migrate && heroku run npm run sequelize db:seed:all

 git push heroku frontend2:master
